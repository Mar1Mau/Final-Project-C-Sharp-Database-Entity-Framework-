//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FilesDBEntities : DbContext
    {
        public FilesDBEntities()
            : base("name=FilesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<Search> Searches { get; set; }
    
        public virtual int InsertFiles(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFiles", fileNameParameter);
        }
    
        public virtual int InsertFilesSearches(Nullable<int> searchID, Nullable<int> fileId)
        {
            var searchIDParameter = searchID.HasValue ?
                new ObjectParameter("SearchID", searchID) :
                new ObjectParameter("SearchID", typeof(int));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFilesSearches", searchIDParameter, fileIdParameter);
        }
    
        public virtual int InsertSearches(string searchName, string directoryName)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var directoryNameParameter = directoryName != null ?
                new ObjectParameter("DirectoryName", directoryName) :
                new ObjectParameter("DirectoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSearches", searchNameParameter, directoryNameParameter);
        }
    }
}
